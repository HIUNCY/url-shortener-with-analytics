basePath: /api/v1
definitions:
  request.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  request.CreateURLRequest:
    properties:
      custom_alias:
        type: string
      description:
        type: string
      expires_at:
        type: string
      original_url:
        type: string
      password:
        type: string
      title:
        type: string
    required:
    - original_url
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  request.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  request.UpdateProfileRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  response.APIErrorResponse:
    properties:
      error:
        $ref: '#/definitions/response.ErrorPayload'
      request_id:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  response.APIKeyResponse:
    properties:
      api_key:
        type: string
      generated_at:
        type: string
    type: object
  response.APIKeySuccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.APIKeyResponse'
      message:
        example: API key regenerated successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.CreateURLResponse:
    properties:
      created_at:
        type: string
      custom_alias:
        type: string
      expires_at:
        type: string
      id:
        type: string
      original_url:
        type: string
      qr_code:
        type: string
      short_code:
        type: string
      short_url:
        type: string
      title:
        type: string
    type: object
  response.CreateURLSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.CreateURLResponse'
      message:
        example: Short URL created successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.ErrorDetail:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  response.ErrorPayload:
    properties:
      code:
        type: string
      details:
        items:
          $ref: '#/definitions/response.ErrorDetail'
        type: array
      message:
        type: string
    type: object
  response.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/response.UserResponse'
    type: object
  response.LoginSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.LoginResponse'
      message:
        example: Login successful
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.ProfileSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.UserResponse'
      success:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        example: Bearer
        type: string
    type: object
  response.RefreshTokenSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.RefreshTokenResponse'
      success:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.RegisterSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.UserResponse'
      message:
        example: User registered successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.SuccessMessageResponse:
    properties:
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.UserResponse:
    properties:
      api_key:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      plan_type:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a URL shortener service with analytics.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: URL Shortener API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token.
      parameters:
      - description: User Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.LoginSuccessResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Log in a user
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Invalidates the user's session (client-side).
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully" // <-- DIUBAH DI SINI
          schema:
            $ref: '#/definitions/response.SuccessMessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Log out a user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generates a new access token using a refresh token.
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/request.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/response.RefreshTokenSuccessResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details.
      parameters:
      - description: User Registration Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully" // <-- DIUBAH DI SINI
          schema:
            $ref: '#/definitions/response.RegisterSuccessResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /profile:
    get:
      description: Retrieves the profile of the currently logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProfileSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Updates the first and last name of the currently logged-in user.
      parameters:
      - description: Profile Information
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProfileSuccessResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Profile
  /profile/api-key/regenerate:
    post:
      description: Generates a new API key for the currently logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIKeySuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Regenerate API Key
      tags:
      - Profile
  /profile/password:
    put:
      consumes:
      - application/json
      description: Updates the password of the currently logged-in user.
      parameters:
      - description: Password Change Info
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessMessageResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "401":
          description: Invalid current password
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Profile
  /urls:
    post:
      consumes:
      - application/json
      description: Creates a new short URL for the authenticated user.
      parameters:
      - description: URL Information
        in: body
        name: url
        required: true
        schema:
          $ref: '#/definitions/request.CreateURLRequest'
      produces:
      - application/json
      responses:
        "201":
          description: URL created successfully
          schema:
            $ref: '#/definitions/response.CreateURLSuccessResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
        "409":
          description: Custom alias already exists
          schema:
            $ref: '#/definitions/response.APIErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create a new short URL
      tags:
      - URLs
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
